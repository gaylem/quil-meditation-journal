"use strict";(self.webpackChunkquil=self.webpackChunkquil||[]).push([[177],{5:(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval('// ESM COMPAT FLAG\n__webpack_require__.r(__webpack_exports__);\n\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, {\n  "default": () => (/* binding */ pages_Home)\n});\n\n// EXTERNAL MODULE: ./node_modules/react/index.js\nvar react = __webpack_require__(709);\n// EXTERNAL MODULE: ./client/hooks/useEntriesContext.js\nvar useEntriesContext = __webpack_require__(416);\n// EXTERNAL MODULE: ./client/hooks/useAuthContext.js\nvar useAuthContext = __webpack_require__(952);\n// EXTERNAL MODULE: ./node_modules/date-fns/format.mjs + 34 modules\nvar format = __webpack_require__(538);\n// EXTERNAL MODULE: ./client/axiosConfig.js\nvar axiosConfig = __webpack_require__(853);\n// EXTERNAL MODULE: ./node_modules/js-cookie/dist/js.cookie.mjs\nvar js_cookie = __webpack_require__(955);\n// EXTERNAL MODULE: ./node_modules/prop-types/index.js\nvar prop_types = __webpack_require__(526);\nvar prop_types_default = /*#__PURE__*/__webpack_require__.n(prop_types);\n;// CONCATENATED MODULE: ./client/components/PastEntry.jsx\nfunction _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }\nfunction _regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return e; }; var t, e = {}, r = Object.prototype, n = r.hasOwnProperty, o = Object.defineProperty || function (t, e, r) { t[e] = r.value; }, i = "function" == typeof Symbol ? Symbol : {}, a = i.iterator || "@@iterator", c = i.asyncIterator || "@@asyncIterator", u = i.toStringTag || "@@toStringTag"; function define(t, e, r) { return Object.defineProperty(t, e, { value: r, enumerable: !0, configurable: !0, writable: !0 }), t[e]; } try { define({}, ""); } catch (t) { define = function define(t, e, r) { return t[e] = r; }; } function wrap(t, e, r, n) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype), c = new Context(n || []); return o(a, "_invoke", { value: makeInvokeMethod(t, r, c) }), a; } function tryCatch(t, e, r) { try { return { type: "normal", arg: t.call(e, r) }; } catch (t) { return { type: "throw", arg: t }; } } e.wrap = wrap; var h = "suspendedStart", l = "suspendedYield", f = "executing", s = "completed", y = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var p = {}; define(p, a, function () { return this; }); var d = Object.getPrototypeOf, v = d && d(d(values([]))); v && v !== r && n.call(v, a) && (p = v); var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p); function defineIteratorMethods(t) { ["next", "throw", "return"].forEach(function (e) { define(t, e, function (t) { return this._invoke(e, t); }); }); } function AsyncIterator(t, e) { function invoke(r, o, i, a) { var c = tryCatch(t[r], t, o); if ("throw" !== c.type) { var u = c.arg, h = u.value; return h && "object" == _typeof(h) && n.call(h, "__await") ? e.resolve(h.__await).then(function (t) { invoke("next", t, i, a); }, function (t) { invoke("throw", t, i, a); }) : e.resolve(h).then(function (t) { u.value = t, i(u); }, function (t) { return invoke("throw", t, i, a); }); } a(c.arg); } var r; o(this, "_invoke", { value: function value(t, n) { function callInvokeWithMethodAndArg() { return new e(function (e, r) { invoke(t, n, e, r); }); } return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(e, r, n) { var o = h; return function (i, a) { if (o === f) throw new Error("Generator is already running"); if (o === s) { if ("throw" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var c = n.delegate; if (c) { var u = maybeInvokeDelegate(c, n); if (u) { if (u === y) continue; return u; } } if ("next" === n.method) n.sent = n._sent = n.arg;else if ("throw" === n.method) { if (o === h) throw o = s, n.arg; n.dispatchException(n.arg); } else "return" === n.method && n.abrupt("return", n.arg); o = f; var p = tryCatch(e, r, n); if ("normal" === p.type) { if (o = n.done ? s : l, p.arg === y) continue; return { value: p.arg, done: n.done }; } "throw" === p.type && (o = s, n.method = "throw", n.arg = p.arg); } }; } function maybeInvokeDelegate(e, r) { var n = r.method, o = e.iterator[n]; if (o === t) return r.delegate = null, "throw" === n && e.iterator["return"] && (r.method = "return", r.arg = t, maybeInvokeDelegate(e, r), "throw" === r.method) || "return" !== n && (r.method = "throw", r.arg = new TypeError("The iterator does not provide a \'" + n + "\' method")), y; var i = tryCatch(o, e.iterator, r.arg); if ("throw" === i.type) return r.method = "throw", r.arg = i.arg, r.delegate = null, y; var a = i.arg; return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, "return" !== r.method && (r.method = "next", r.arg = t), r.delegate = null, y) : a : (r.method = "throw", r.arg = new TypeError("iterator result is not an object"), r.delegate = null, y); } function pushTryEntry(t) { var e = { tryLoc: t[0] }; 1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e); } function resetTryEntry(t) { var e = t.completion || {}; e.type = "normal", delete e.arg, t.completion = e; } function Context(t) { this.tryEntries = [{ tryLoc: "root" }], t.forEach(pushTryEntry, this), this.reset(!0); } function values(e) { if (e || "" === e) { var r = e[a]; if (r) return r.call(e); if ("function" == typeof e.next) return e; if (!isNaN(e.length)) { var o = -1, i = function next() { for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next; return next.value = t, next.done = !0, next; }; return i.next = i; } } throw new TypeError(_typeof(e) + " is not iterable"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, "constructor", { value: GeneratorFunctionPrototype, configurable: !0 }), o(GeneratorFunctionPrototype, "constructor", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, "GeneratorFunction"), e.isGeneratorFunction = function (t) { var e = "function" == typeof t && t.constructor; return !!e && (e === GeneratorFunction || "GeneratorFunction" === (e.displayName || e.name)); }, e.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, "GeneratorFunction")), t.prototype = Object.create(g), t; }, e.awrap = function (t) { return { __await: t }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () { return this; }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(wrap(t, r, n, o), i); return e.isGeneratorFunction(r) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, defineIteratorMethods(g), define(g, u, "Generator"), define(g, a, function () { return this; }), define(g, "toString", function () { return "[object Generator]"; }), e.keys = function (t) { var e = Object(t), r = []; for (var n in e) r.push(n); return r.reverse(), function next() { for (; r.length;) { var t = r.pop(); if (t in e) return next.value = t, next.done = !1, next; } return next.done = !0, next; }; }, e.values = values, Context.prototype = { constructor: Context, reset: function reset(e) { if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = "next", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) "t" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0].completion; if ("throw" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(e) { if (this.done) throw e; var r = this; function handle(n, o) { return a.type = "throw", a.arg = e, r.next = n, o && (r.method = "next", r.arg = t), !!o; } for (var o = this.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i.completion; if ("root" === i.tryLoc) return handle("end"); if (i.tryLoc <= this.prev) { var c = n.call(i, "catchLoc"), u = n.call(i, "finallyLoc"); if (c && u) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } else if (c) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); } else { if (!u) throw new Error("try statement without catch or finally"); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } } } }, abrupt: function abrupt(t, e) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var o = this.tryEntries[r]; if (o.tryLoc <= this.prev && n.call(o, "finallyLoc") && this.prev < o.finallyLoc) { var i = o; break; } } i && ("break" === t || "continue" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null); var a = i ? i.completion : {}; return a.type = t, a.arg = e, i ? (this.method = "next", this.next = i.finallyLoc, y) : this.complete(a); }, complete: function complete(t, e) { if ("throw" === t.type) throw t.arg; return "break" === t.type || "continue" === t.type ? this.next = t.arg : "return" === t.type ? (this.rval = this.arg = t.arg, this.method = "return", this.next = "end") : "normal" === t.type && e && (this.next = e), y; }, finish: function finish(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y; } }, "catch": function _catch(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.tryLoc === t) { var n = r.completion; if ("throw" === n.type) { var o = n.arg; resetTryEntry(r); } return o; } } throw new Error("illegal catch attempt"); }, delegateYield: function delegateYield(e, r, n) { return this.delegate = { iterator: values(e), resultName: r, nextLoc: n }, "next" === this.method && (this.arg = t), y; } }, e; }\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\nfunction _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\nfunction _iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t["return"] && (u = t["return"](), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n//** PAST ENTRY COMPONENT */\n\n\n\n// Import hooks\n\n\n\n// Import libraries\n\n\n\n\n\n/**\n * PastEntry component renders an individual past journal entry.\n * It allows the user to toggle the display, delete the entry, and edit the entry.\n *\n * @param {Object} entry - The individual entry to be rendered.\n */\nvar PastEntry = function PastEntry(_ref) {\n  var entry = _ref.entry;\n  // Destructure entry properties\n  var _id = entry._id,\n    createdAt = entry.createdAt,\n    body = entry.body;\n\n  // Retrieve dispatch and user information from contexts\n  var _useEntriesContext = (0,useEntriesContext/* useEntriesContext */.O)(),\n    dispatch = _useEntriesContext.dispatch;\n  var _useAuthContext = (0,useAuthContext/* useAuthContext */.E)(),\n    user = _useAuthContext.user;\n\n  // useState hooks for managing component state\n  var _useState = (0,react.useState)(false),\n    _useState2 = _slicedToArray(_useState, 2),\n    open = _useState2[0],\n    setOpen = _useState2[1];\n  var _useState3 = (0,react.useState)(false),\n    _useState4 = _slicedToArray(_useState3, 2),\n    isEditing = _useState4[0],\n    setIsEditing = _useState4[1];\n  var _useState5 = (0,react.useState)(body),\n    _useState6 = _slicedToArray(_useState5, 2),\n    editedBody = _useState6[0],\n    setEditedBody = _useState6[1];\n\n  // Function to toggle the entry open and closed and manage editing state\n  var toggle = function toggle() {\n    setOpen(!open);\n    setIsEditing(false);\n  };\n\n  // Create formatted date\n  var formattedDate = (0,format/* default */.Z)(createdAt, \'EEEE, MMMM d, yyyy\');\n\n  // Function to handle editing an entry\n  var handleEdit = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n      var response, _error$response;\n      return _regeneratorRuntime().wrap(function _callee$(_context) {\n        while (1) switch (_context.prev = _context.next) {\n          case 0:\n            _context.prev = 0;\n            _context.next = 3;\n            return axiosConfig/* default */.Z.patch("/api/entries/".concat(user.userId), {\n              body: editedBody,\n              _id: _id\n            }, {\n              withCredentials: true,\n              headers: {\n                Authorization: "Bearer ".concat(user.accessToken)\n              }\n            });\n          case 3:\n            response = _context.sent;\n            if (response.status === 200) {\n              // Update the access token in the cookie\n              js_cookie/* default */.Z.set(\'user\', JSON.stringify(response.data.authData), {\n                expires: 28 / (24 * 60),\n                // Expires in 28 minutes\n                secure: true,\n                // Secure attribute (requires HTTPS)\n                sameSite: \'Strict\' // SameSite attribute set to \'Strict\'\n              });\n              // Update the local state immediately\n              dispatch({\n                type: \'EDIT_ENTRY\',\n                payload: {\n                  _id: _id,\n                  body: response.data.body\n                }\n              });\n              // Update tokens and user state\n              dispatch({\n                type: \'LOGIN\',\n                payload: response.data.authData\n              });\n              dispatch({\n                type: \'ACCESS_TOKEN\',\n                payload: response.data.authData.accessToken\n              });\n            }\n            // Toggle the entry closed\n            toggle();\n            _context.next = 12;\n            break;\n          case 8:\n            _context.prev = 8;\n            _context.t0 = _context["catch"](0);\n            console.error(\'Error editing entry:\', _context.t0.stack);\n            if ((_error$response = _context.t0.response) !== null && _error$response !== void 0 && (_error$response = _error$response.data) !== null && _error$response !== void 0 && _error$response.redirectToLogin) {\n              // Clear token from local storage\n              js_cookie/* default */.Z.remove(\'user\');\n              // Redirect to the login page\n              window.location.href = \'/login\';\n            }\n          case 12:\n          case "end":\n            return _context.stop();\n        }\n      }, _callee, null, [[0, 8]]);\n    }));\n    return function handleEdit() {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  // Function to handle deleting an entry\n  var handleDelete = /*#__PURE__*/function () {\n    var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n      var response, deletedId;\n      return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n        while (1) switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.prev = 0;\n            _context2.next = 3;\n            return axiosConfig/* default */.Z["delete"]("/api/entries/".concat(user.userId), {\n              withCredentials: true,\n              headers: {\n                Authorization: "Bearer ".concat(user.accessToken)\n              },\n              data: {\n                entryId: _id\n              } // Pass data as an object\n            });\n          case 3:\n            response = _context2.sent;\n            deletedId = response.data.deletedId;\n            if (response.status === 200) {\n              // Remove the entry from the local state immediately\n              dispatch({\n                type: \'DELETE_ENTRY\',\n                payload: {\n                  _id: deletedId\n                }\n              });\n              // Update tokens and user state\n              dispatch({\n                type: \'LOGIN\',\n                payload: response.data.authData\n              });\n              dispatch({\n                type: \'ACCESS_TOKEN\',\n                payload: response.data.authData.accessToken\n              });\n            }\n            _context2.next = 13;\n            break;\n          case 8:\n            _context2.prev = 8;\n            _context2.t0 = _context2["catch"](0);\n            console.error(\'Error deleting entry:\', _context2.t0.stack);\n            // Clear token from local storage\n            js_cookie/* default */.Z.remove(\'user\');\n            // Redirect to the login page\n            window.location.href = \'/login\';\n          case 13:\n          case "end":\n            return _context2.stop();\n        }\n      }, _callee2, null, [[0, 8]]);\n    }));\n    return function handleDelete() {\n      return _ref3.apply(this, arguments);\n    };\n  }();\n\n  // Render the PastEntry component\n  return /*#__PURE__*/react.createElement("div", {\n    key: _id,\n    className: "toggle-entry"\n  }, /*#__PURE__*/react.createElement("div", {\n    className: "toggle-header"\n  }, /*#__PURE__*/react.createElement("button", {\n    className: "toggle-btn",\n    onClick: toggle\n  }, "+"), /*#__PURE__*/react.createElement("h4", {\n    className: "toggle-title"\n  }, formattedDate)), /*#__PURE__*/react.createElement("div", null, open && /*#__PURE__*/react.createElement("div", {\n    className: "toggle-container"\n  }, isEditing ? /*#__PURE__*/react.createElement("textarea", {\n    className: "toggle-edit-text",\n    value: editedBody,\n    onChange: function onChange(e) {\n      return setEditedBody(e.target.value);\n    }\n  }) : /*#__PURE__*/react.createElement("p", {\n    className: "toggle-text"\n  }, body), /*#__PURE__*/react.createElement("div", {\n    className: "entry-btns"\n  }, /*#__PURE__*/react.createElement("input", {\n    className: "entry-cancel-delete-btn",\n    type: "submit",\n    onClick: handleDelete,\n    value: "Delete"\n  }), isEditing ? /*#__PURE__*/react.createElement("input", {\n    className: "entry-save-edit-btn",\n    type: "submit",\n    onClick: handleEdit,\n    value: "Save"\n  }) : /*#__PURE__*/react.createElement("input", {\n    className: "entry-save-edit-btn",\n    type: "submit",\n    onClick: function onClick() {\n      return setIsEditing(true);\n    },\n    value: "Edit"\n  })))));\n};\n\n// PropTypes for the PastEntry component\nPastEntry.propTypes = {\n  entry: prop_types_default().shape({\n    _id: (prop_types_default()).string.isRequired,\n    createdAt: (prop_types_default()).string.isRequired\n  }).isRequired\n};\n/* harmony default export */ const components_PastEntry = (PastEntry);\n;// CONCATENATED MODULE: ./client/components/NewEntry.jsx\nfunction NewEntry_typeof(o) { "@babel/helpers - typeof"; return NewEntry_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, NewEntry_typeof(o); }\nfunction NewEntry_regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ NewEntry_regeneratorRuntime = function _regeneratorRuntime() { return e; }; var t, e = {}, r = Object.prototype, n = r.hasOwnProperty, o = Object.defineProperty || function (t, e, r) { t[e] = r.value; }, i = "function" == typeof Symbol ? Symbol : {}, a = i.iterator || "@@iterator", c = i.asyncIterator || "@@asyncIterator", u = i.toStringTag || "@@toStringTag"; function define(t, e, r) { return Object.defineProperty(t, e, { value: r, enumerable: !0, configurable: !0, writable: !0 }), t[e]; } try { define({}, ""); } catch (t) { define = function define(t, e, r) { return t[e] = r; }; } function wrap(t, e, r, n) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype), c = new Context(n || []); return o(a, "_invoke", { value: makeInvokeMethod(t, r, c) }), a; } function tryCatch(t, e, r) { try { return { type: "normal", arg: t.call(e, r) }; } catch (t) { return { type: "throw", arg: t }; } } e.wrap = wrap; var h = "suspendedStart", l = "suspendedYield", f = "executing", s = "completed", y = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var p = {}; define(p, a, function () { return this; }); var d = Object.getPrototypeOf, v = d && d(d(values([]))); v && v !== r && n.call(v, a) && (p = v); var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p); function defineIteratorMethods(t) { ["next", "throw", "return"].forEach(function (e) { define(t, e, function (t) { return this._invoke(e, t); }); }); } function AsyncIterator(t, e) { function invoke(r, o, i, a) { var c = tryCatch(t[r], t, o); if ("throw" !== c.type) { var u = c.arg, h = u.value; return h && "object" == NewEntry_typeof(h) && n.call(h, "__await") ? e.resolve(h.__await).then(function (t) { invoke("next", t, i, a); }, function (t) { invoke("throw", t, i, a); }) : e.resolve(h).then(function (t) { u.value = t, i(u); }, function (t) { return invoke("throw", t, i, a); }); } a(c.arg); } var r; o(this, "_invoke", { value: function value(t, n) { function callInvokeWithMethodAndArg() { return new e(function (e, r) { invoke(t, n, e, r); }); } return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(e, r, n) { var o = h; return function (i, a) { if (o === f) throw new Error("Generator is already running"); if (o === s) { if ("throw" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var c = n.delegate; if (c) { var u = maybeInvokeDelegate(c, n); if (u) { if (u === y) continue; return u; } } if ("next" === n.method) n.sent = n._sent = n.arg;else if ("throw" === n.method) { if (o === h) throw o = s, n.arg; n.dispatchException(n.arg); } else "return" === n.method && n.abrupt("return", n.arg); o = f; var p = tryCatch(e, r, n); if ("normal" === p.type) { if (o = n.done ? s : l, p.arg === y) continue; return { value: p.arg, done: n.done }; } "throw" === p.type && (o = s, n.method = "throw", n.arg = p.arg); } }; } function maybeInvokeDelegate(e, r) { var n = r.method, o = e.iterator[n]; if (o === t) return r.delegate = null, "throw" === n && e.iterator["return"] && (r.method = "return", r.arg = t, maybeInvokeDelegate(e, r), "throw" === r.method) || "return" !== n && (r.method = "throw", r.arg = new TypeError("The iterator does not provide a \'" + n + "\' method")), y; var i = tryCatch(o, e.iterator, r.arg); if ("throw" === i.type) return r.method = "throw", r.arg = i.arg, r.delegate = null, y; var a = i.arg; return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, "return" !== r.method && (r.method = "next", r.arg = t), r.delegate = null, y) : a : (r.method = "throw", r.arg = new TypeError("iterator result is not an object"), r.delegate = null, y); } function pushTryEntry(t) { var e = { tryLoc: t[0] }; 1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e); } function resetTryEntry(t) { var e = t.completion || {}; e.type = "normal", delete e.arg, t.completion = e; } function Context(t) { this.tryEntries = [{ tryLoc: "root" }], t.forEach(pushTryEntry, this), this.reset(!0); } function values(e) { if (e || "" === e) { var r = e[a]; if (r) return r.call(e); if ("function" == typeof e.next) return e; if (!isNaN(e.length)) { var o = -1, i = function next() { for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next; return next.value = t, next.done = !0, next; }; return i.next = i; } } throw new TypeError(NewEntry_typeof(e) + " is not iterable"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, "constructor", { value: GeneratorFunctionPrototype, configurable: !0 }), o(GeneratorFunctionPrototype, "constructor", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, "GeneratorFunction"), e.isGeneratorFunction = function (t) { var e = "function" == typeof t && t.constructor; return !!e && (e === GeneratorFunction || "GeneratorFunction" === (e.displayName || e.name)); }, e.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, "GeneratorFunction")), t.prototype = Object.create(g), t; }, e.awrap = function (t) { return { __await: t }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () { return this; }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(wrap(t, r, n, o), i); return e.isGeneratorFunction(r) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, defineIteratorMethods(g), define(g, u, "Generator"), define(g, a, function () { return this; }), define(g, "toString", function () { return "[object Generator]"; }), e.keys = function (t) { var e = Object(t), r = []; for (var n in e) r.push(n); return r.reverse(), function next() { for (; r.length;) { var t = r.pop(); if (t in e) return next.value = t, next.done = !1, next; } return next.done = !0, next; }; }, e.values = values, Context.prototype = { constructor: Context, reset: function reset(e) { if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = "next", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) "t" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0].completion; if ("throw" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(e) { if (this.done) throw e; var r = this; function handle(n, o) { return a.type = "throw", a.arg = e, r.next = n, o && (r.method = "next", r.arg = t), !!o; } for (var o = this.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i.completion; if ("root" === i.tryLoc) return handle("end"); if (i.tryLoc <= this.prev) { var c = n.call(i, "catchLoc"), u = n.call(i, "finallyLoc"); if (c && u) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } else if (c) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); } else { if (!u) throw new Error("try statement without catch or finally"); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } } } }, abrupt: function abrupt(t, e) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var o = this.tryEntries[r]; if (o.tryLoc <= this.prev && n.call(o, "finallyLoc") && this.prev < o.finallyLoc) { var i = o; break; } } i && ("break" === t || "continue" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null); var a = i ? i.completion : {}; return a.type = t, a.arg = e, i ? (this.method = "next", this.next = i.finallyLoc, y) : this.complete(a); }, complete: function complete(t, e) { if ("throw" === t.type) throw t.arg; return "break" === t.type || "continue" === t.type ? this.next = t.arg : "return" === t.type ? (this.rval = this.arg = t.arg, this.method = "return", this.next = "end") : "normal" === t.type && e && (this.next = e), y; }, finish: function finish(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y; } }, "catch": function _catch(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.tryLoc === t) { var n = r.completion; if ("throw" === n.type) { var o = n.arg; resetTryEntry(r); } return o; } } throw new Error("illegal catch attempt"); }, delegateYield: function delegateYield(e, r, n) { return this.delegate = { iterator: values(e), resultName: r, nextLoc: n }, "next" === this.method && (this.arg = t), y; } }, e; }\nfunction NewEntry_asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\nfunction NewEntry_asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { NewEntry_asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { NewEntry_asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }\nfunction NewEntry_slicedToArray(arr, i) { return NewEntry_arrayWithHoles(arr) || NewEntry_iterableToArrayLimit(arr, i) || NewEntry_unsupportedIterableToArray(arr, i) || NewEntry_nonIterableRest(); }\nfunction NewEntry_nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\nfunction NewEntry_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return NewEntry_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return NewEntry_arrayLikeToArray(o, minLen); }\nfunction NewEntry_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\nfunction NewEntry_iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t["return"] && (u = t["return"](), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }\nfunction NewEntry_arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n//** NEW ENTRY COMPONENT */\n\n\n\n// Import hooks\n\n\n\n// Import libraries\n\n\n\n\n/**\n * NewEntry component handles the creation of new journal entries.\n *\n * It manages state for date display, entry body content, and toggle functionality.\n * The component interacts with the EntriesContext to dispatch new entries and with\n * the AuthContext to retrieve user information.\n *\n * @returns {JSX.Element} The rendered NewEntry component.\n */\nfunction NewEntry() {\n  // Create formatted date\n  var formattedDate = (0,format/* default */.Z)(new Date(), \'EEEE, MMMM d, yyyy\');\n\n  // State and function to manage \'New Meditation\' text and NewEntry toggle functionality\n  var _useState = (0,react.useState)(\'New Journal Entry\'),\n    _useState2 = NewEntry_slicedToArray(_useState, 2),\n    date = _useState2[0],\n    setDate = _useState2[1];\n  var _useState3 = (0,react.useState)(false),\n    _useState4 = NewEntry_slicedToArray(_useState3, 2),\n    open = _useState4[0],\n    setOpen = _useState4[1];\n\n  // Function to toggle new meditation section open and closed\n  var toggle = function toggle() {\n    setOpen(!open);\n    setDate(open ? \'New Journal Entry\' : formattedDate);\n  };\n\n  // Retrieve dispatch functionality from useEntriesContext and user data from useAuthContext\n  var _useEntriesContext = (0,useEntriesContext/* useEntriesContext */.O)(),\n    dispatch = _useEntriesContext.dispatch;\n  var _useAuthContext = (0,useAuthContext/* useAuthContext */.E)(),\n    user = _useAuthContext.user;\n\n  // State and function to manage the entry body content, errors, and empty fields\n  var _useState5 = (0,react.useState)(\'\'),\n    _useState6 = NewEntry_slicedToArray(_useState5, 2),\n    body = _useState6[0],\n    setBody = _useState6[1];\n\n  /**\n   * Handles the submission of a new entry.\n   *\n   * @param {Event} e - The submit event.\n   */\n  var handleSubmit = /*#__PURE__*/function () {\n    var _ref = NewEntry_asyncToGenerator( /*#__PURE__*/NewEntry_regeneratorRuntime().mark(function _callee(e) {\n      var userId, entry, response, _error$response;\n      return NewEntry_regeneratorRuntime().wrap(function _callee$(_context) {\n        while (1) switch (_context.prev = _context.next) {\n          case 0:\n            e.preventDefault();\n\n            // Extract the userId from the user object\n            userId = user.userId; // Store the body and the userId in an entry variable for sending to the database\n            entry = {\n              body: body\n            }; // Try/catch block to send POST request to the database and store the new entry\n            _context.prev = 3;\n            _context.next = 6;\n            return axiosConfig/* default */.Z.post("/api/entries/".concat(userId), entry, {\n              withCredentials: true,\n              headers: {\n                Authorization: "Bearer ".concat(user.accessToken)\n              }\n            });\n          case 6:\n            response = _context.sent;\n            // Reset the body state\n            setBody(\'\');\n            if (response.status === 201) {\n              // Update the access token in the cookie\n              js_cookie/* default */.Z.set(\'user\', JSON.stringify(response.data.authData), {\n                expires: 28 / (24 * 60),\n                // Expires in 28 minutes\n                secure: true,\n                // Secure attribute (requires HTTPS)\n                sameSite: \'Strict\' // SameSite attribute set to \'Strict\'\n              });\n              // Dispatch the new entry with response.data as the payload\n              dispatch({\n                type: \'CREATE_ENTRY\',\n                payload: response.data.newEntry\n              });\n              // Update tokens and user state\n              dispatch({\n                type: \'LOGIN\',\n                payload: response.data.authData\n              });\n              dispatch({\n                type: \'ACCESS_TOKEN\',\n                payload: response.data.authData.accessToken\n              });\n            }\n            _context.next = 15;\n            break;\n          case 11:\n            _context.prev = 11;\n            _context.t0 = _context["catch"](3);\n            console.error(\'Error adding entry:\', _context.t0.stack);\n            if ((_error$response = _context.t0.response) !== null && _error$response !== void 0 && (_error$response = _error$response.data) !== null && _error$response !== void 0 && _error$response.redirectToLogin) {\n              // Clear token from cookies\n              js_cookie/* default */.Z.remove(\'user\');\n              // Redirect to the login page\n              window.location.href = \'/login\';\n            }\n          case 15:\n            // When the try/catch block completes, toggle the NewEntry section closed\n            toggle();\n          case 16:\n          case "end":\n            return _context.stop();\n        }\n      }, _callee, null, [[3, 11]]);\n    }));\n    return function handleSubmit(_x) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n  return /*#__PURE__*/react.createElement("div", {\n    className: "new-entry"\n  }, /*#__PURE__*/react.createElement("div", {\n    className: "new-entry-header"\n  }, /*#__PURE__*/react.createElement("button", {\n    className: "new-entry-btn",\n    onClick: toggle\n  }, "+"), /*#__PURE__*/react.createElement("h3", null, date)), open &&\n  /*#__PURE__*/\n  // Form for submitting a new entry, contains cancel and save buttons\n  react.createElement("form", {\n    method: "post",\n    onSubmit: handleSubmit\n  }, /*#__PURE__*/react.createElement("div", null), /*#__PURE__*/react.createElement("label", {\n    className: "visually-hidden",\n    htmlFor: "body"\n  }, "New Journal Entry:"), /*#__PURE__*/react.createElement("textarea", {\n    className: "entry-body",\n    id: "body",\n    name: "body",\n    placeholder: "How did it go?",\n    rows: 5,\n    cols: 15,\n    onChange: function onChange(e) {\n      return setBody(e.target.value);\n    },\n    value: body\n  }), /*#__PURE__*/react.createElement("div", {\n    className: "entry-btns"\n  }, /*#__PURE__*/react.createElement("input", {\n    className: "entry-cancel-delete-btn",\n    type: "button",\n    onClick: toggle,\n    value: "Cancel"\n  }), /*#__PURE__*/react.createElement("input", {\n    className: "entry-save-edit-btn",\n    type: "submit",\n    value: "Save"\n  }))));\n}\n/* harmony default export */ const components_NewEntry = (NewEntry);\n;// CONCATENATED MODULE: ./client/components/PastEntriesFeed.jsx\nfunction PastEntriesFeed_typeof(o) { "@babel/helpers - typeof"; return PastEntriesFeed_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, PastEntriesFeed_typeof(o); }\nfunction PastEntriesFeed_regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ PastEntriesFeed_regeneratorRuntime = function _regeneratorRuntime() { return e; }; var t, e = {}, r = Object.prototype, n = r.hasOwnProperty, o = Object.defineProperty || function (t, e, r) { t[e] = r.value; }, i = "function" == typeof Symbol ? Symbol : {}, a = i.iterator || "@@iterator", c = i.asyncIterator || "@@asyncIterator", u = i.toStringTag || "@@toStringTag"; function define(t, e, r) { return Object.defineProperty(t, e, { value: r, enumerable: !0, configurable: !0, writable: !0 }), t[e]; } try { define({}, ""); } catch (t) { define = function define(t, e, r) { return t[e] = r; }; } function wrap(t, e, r, n) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype), c = new Context(n || []); return o(a, "_invoke", { value: makeInvokeMethod(t, r, c) }), a; } function tryCatch(t, e, r) { try { return { type: "normal", arg: t.call(e, r) }; } catch (t) { return { type: "throw", arg: t }; } } e.wrap = wrap; var h = "suspendedStart", l = "suspendedYield", f = "executing", s = "completed", y = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var p = {}; define(p, a, function () { return this; }); var d = Object.getPrototypeOf, v = d && d(d(values([]))); v && v !== r && n.call(v, a) && (p = v); var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p); function defineIteratorMethods(t) { ["next", "throw", "return"].forEach(function (e) { define(t, e, function (t) { return this._invoke(e, t); }); }); } function AsyncIterator(t, e) { function invoke(r, o, i, a) { var c = tryCatch(t[r], t, o); if ("throw" !== c.type) { var u = c.arg, h = u.value; return h && "object" == PastEntriesFeed_typeof(h) && n.call(h, "__await") ? e.resolve(h.__await).then(function (t) { invoke("next", t, i, a); }, function (t) { invoke("throw", t, i, a); }) : e.resolve(h).then(function (t) { u.value = t, i(u); }, function (t) { return invoke("throw", t, i, a); }); } a(c.arg); } var r; o(this, "_invoke", { value: function value(t, n) { function callInvokeWithMethodAndArg() { return new e(function (e, r) { invoke(t, n, e, r); }); } return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(e, r, n) { var o = h; return function (i, a) { if (o === f) throw new Error("Generator is already running"); if (o === s) { if ("throw" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var c = n.delegate; if (c) { var u = maybeInvokeDelegate(c, n); if (u) { if (u === y) continue; return u; } } if ("next" === n.method) n.sent = n._sent = n.arg;else if ("throw" === n.method) { if (o === h) throw o = s, n.arg; n.dispatchException(n.arg); } else "return" === n.method && n.abrupt("return", n.arg); o = f; var p = tryCatch(e, r, n); if ("normal" === p.type) { if (o = n.done ? s : l, p.arg === y) continue; return { value: p.arg, done: n.done }; } "throw" === p.type && (o = s, n.method = "throw", n.arg = p.arg); } }; } function maybeInvokeDelegate(e, r) { var n = r.method, o = e.iterator[n]; if (o === t) return r.delegate = null, "throw" === n && e.iterator["return"] && (r.method = "return", r.arg = t, maybeInvokeDelegate(e, r), "throw" === r.method) || "return" !== n && (r.method = "throw", r.arg = new TypeError("The iterator does not provide a \'" + n + "\' method")), y; var i = tryCatch(o, e.iterator, r.arg); if ("throw" === i.type) return r.method = "throw", r.arg = i.arg, r.delegate = null, y; var a = i.arg; return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, "return" !== r.method && (r.method = "next", r.arg = t), r.delegate = null, y) : a : (r.method = "throw", r.arg = new TypeError("iterator result is not an object"), r.delegate = null, y); } function pushTryEntry(t) { var e = { tryLoc: t[0] }; 1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e); } function resetTryEntry(t) { var e = t.completion || {}; e.type = "normal", delete e.arg, t.completion = e; } function Context(t) { this.tryEntries = [{ tryLoc: "root" }], t.forEach(pushTryEntry, this), this.reset(!0); } function values(e) { if (e || "" === e) { var r = e[a]; if (r) return r.call(e); if ("function" == typeof e.next) return e; if (!isNaN(e.length)) { var o = -1, i = function next() { for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next; return next.value = t, next.done = !0, next; }; return i.next = i; } } throw new TypeError(PastEntriesFeed_typeof(e) + " is not iterable"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, "constructor", { value: GeneratorFunctionPrototype, configurable: !0 }), o(GeneratorFunctionPrototype, "constructor", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, "GeneratorFunction"), e.isGeneratorFunction = function (t) { var e = "function" == typeof t && t.constructor; return !!e && (e === GeneratorFunction || "GeneratorFunction" === (e.displayName || e.name)); }, e.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, "GeneratorFunction")), t.prototype = Object.create(g), t; }, e.awrap = function (t) { return { __await: t }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () { return this; }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(wrap(t, r, n, o), i); return e.isGeneratorFunction(r) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, defineIteratorMethods(g), define(g, u, "Generator"), define(g, a, function () { return this; }), define(g, "toString", function () { return "[object Generator]"; }), e.keys = function (t) { var e = Object(t), r = []; for (var n in e) r.push(n); return r.reverse(), function next() { for (; r.length;) { var t = r.pop(); if (t in e) return next.value = t, next.done = !1, next; } return next.done = !0, next; }; }, e.values = values, Context.prototype = { constructor: Context, reset: function reset(e) { if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = "next", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) "t" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0].completion; if ("throw" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(e) { if (this.done) throw e; var r = this; function handle(n, o) { return a.type = "throw", a.arg = e, r.next = n, o && (r.method = "next", r.arg = t), !!o; } for (var o = this.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i.completion; if ("root" === i.tryLoc) return handle("end"); if (i.tryLoc <= this.prev) { var c = n.call(i, "catchLoc"), u = n.call(i, "finallyLoc"); if (c && u) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } else if (c) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); } else { if (!u) throw new Error("try statement without catch or finally"); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } } } }, abrupt: function abrupt(t, e) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var o = this.tryEntries[r]; if (o.tryLoc <= this.prev && n.call(o, "finallyLoc") && this.prev < o.finallyLoc) { var i = o; break; } } i && ("break" === t || "continue" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null); var a = i ? i.completion : {}; return a.type = t, a.arg = e, i ? (this.method = "next", this.next = i.finallyLoc, y) : this.complete(a); }, complete: function complete(t, e) { if ("throw" === t.type) throw t.arg; return "break" === t.type || "continue" === t.type ? this.next = t.arg : "return" === t.type ? (this.rval = this.arg = t.arg, this.method = "return", this.next = "end") : "normal" === t.type && e && (this.next = e), y; }, finish: function finish(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y; } }, "catch": function _catch(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.tryLoc === t) { var n = r.completion; if ("throw" === n.type) { var o = n.arg; resetTryEntry(r); } return o; } } throw new Error("illegal catch attempt"); }, delegateYield: function delegateYield(e, r, n) { return this.delegate = { iterator: values(e), resultName: r, nextLoc: n }, "next" === this.method && (this.arg = t), y; } }, e; }\nfunction PastEntriesFeed_asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\nfunction PastEntriesFeed_asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { PastEntriesFeed_asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { PastEntriesFeed_asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }\n//** PAST ENTRIES FEED COMPONENT */\n\n\n\n\n\n// Import components\n\n\n\n// Import other libraries\n\n\n\n/**\n * PastEntriesFeed component renders a feed of past journal entries for the authenticated user.\n * It uses the useEntriesContext to manage state and useEffect to fetch and render past entries.\n *\n * @returns {JSX.Element} The rendered PastEntriesFeed component.\n */\nvar PastEntriesFeed = function PastEntriesFeed() {\n  // Retrieve entries and dispatch functionality from useEntriesContext\n  var _useEntriesContext = (0,useEntriesContext/* useEntriesContext */.O)(),\n    entries = _useEntriesContext.entries,\n    dispatch = _useEntriesContext.dispatch;\n\n  // Retrieve user information from useAuthContext\n  var _useAuthContext = (0,useAuthContext/* useAuthContext */.E)(),\n    user = _useAuthContext.user;\n  (0,react.useEffect)(function () {\n    // Function to fetch past entries from the server\n    var fetchEntries = /*#__PURE__*/function () {\n      var _ref = PastEntriesFeed_asyncToGenerator( /*#__PURE__*/PastEntriesFeed_regeneratorRuntime().mark(function _callee() {\n        var response, sortedEntries, _error$response;\n        return PastEntriesFeed_regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n              _context.next = 3;\n              return axiosConfig/* default */.Z.get("/api/entries/".concat(user.userId), {\n                withCredentials: true,\n                headers: {\n                  Authorization: "Bearer ".concat(user.accessToken)\n                }\n              });\n            case 3:\n              response = _context.sent;\n              // Sort the entries by createdAt date in descending order\n              sortedEntries = response.data.allEntries.sort(function (a, b) {\n                var dateA = a.createdAt ? new Date(a.createdAt) : 0;\n                var dateB = b.createdAt ? new Date(b.createdAt) : 0;\n                return dateB - dateA;\n              }); // If the GET request is successful (status code 200), update the entries in the context\n              if (response.status === 200) {\n                // Update the access token in the cookie\n                js_cookie/* default */.Z.set(\'user\', JSON.stringify(response.data.authData), {\n                  expires: 28 / (24 * 60),\n                  // Expires in 28 minutes\n                  secure: true,\n                  // Secure attribute (requires HTTPS)\n                  sameSite: \'Strict\' // SameSite attribute set to \'Strict\'\n                });\n                // Update entries state\n                dispatch({\n                  type: \'SET_ENTRIES\',\n                  payload: sortedEntries\n                });\n                // Update tokens and user state\n                dispatch({\n                  type: \'LOGIN\',\n                  payload: response.data.authData\n                });\n                dispatch({\n                  type: \'ACCESS_TOKEN\',\n                  payload: response.data.authData.accessToken\n                });\n              }\n              _context.next = 12;\n              break;\n            case 8:\n              _context.prev = 8;\n              _context.t0 = _context["catch"](0);\n              console.error(\'Error fetching entries:\', _context.t0.stack);\n              if ((_error$response = _context.t0.response) !== null && _error$response !== void 0 && (_error$response = _error$response.data) !== null && _error$response !== void 0 && _error$response.redirectToLogin) {\n                // Clear token from cookies\n                js_cookie/* default */.Z.remove(\'user\');\n                // Redirect to the login page\n                window.location.href = \'/login\';\n              }\n            case 12:\n            case "end":\n              return _context.stop();\n          }\n        }, _callee, null, [[0, 8]]);\n      }));\n      return function fetchEntries() {\n        return _ref.apply(this, arguments);\n      };\n    }();\n\n    // If the user is authenticated, fetch past entries\n    if (user) {\n      fetchEntries();\n    }\n  }, [dispatch, user]);\n\n  // Check if entries is null, display a loading message\n  if (entries === null) {\n    return /*#__PURE__*/react.createElement("div", {\n      className: "loading"\n    }, "Loading...");\n  }\n\n  // Render the PastEntriesFeed component\n  return /*#__PURE__*/react.createElement("div", {\n    className: "feed-container"\n  }, /*#__PURE__*/react.createElement("div", {\n    className: "new-entry-box"\n  }, /*#__PURE__*/react.createElement(components_NewEntry, null)), entries.map(function (entry, index) {\n    return /*#__PURE__*/react.createElement(components_PastEntry, {\n      key: entry._id || index,\n      entry: entry\n    });\n  }));\n};\n/* harmony default export */ const components_PastEntriesFeed = (PastEntriesFeed);\n// EXTERNAL MODULE: ./node_modules/react-screen-wake-lock/dist/react-screen-wake-lock.esm.js\nvar react_screen_wake_lock_esm = __webpack_require__(735);\n// EXTERNAL MODULE: ./node_modules/use-sound/dist/use-sound.esm.js\nvar use_sound_esm = __webpack_require__(581);\n;// CONCATENATED MODULE: ./public/assets/audio/singing-bowl.mp3\n/* harmony default export */ const singing_bowl = (__webpack_require__.p + "assets/audio/singing-bowl.mp3");\n;// CONCATENATED MODULE: ./public/assets/images/play-button.png\n/* harmony default export */ const play_button = (__webpack_require__.p + "assets/images/play-button.113dbb237aaa3a73e05c1af7c48b2ab5.png");\n;// CONCATENATED MODULE: ./public/assets/images/reset-button.png\n/* harmony default export */ const reset_button = (__webpack_require__.p + "assets/images/reset-button.a78597affd540f0857a13a8821a4a3f6.png");\n;// CONCATENATED MODULE: ./public/assets/images/pause-button.png\n/* harmony default export */ const pause_button = (__webpack_require__.p + "assets/images/pause-button.81ee5fb35f8a4361dd66701ff34a67f8.png");\n;// CONCATENATED MODULE: ./client/components/Timer.jsx\nfunction Timer_slicedToArray(arr, i) { return Timer_arrayWithHoles(arr) || Timer_iterableToArrayLimit(arr, i) || Timer_unsupportedIterableToArray(arr, i) || Timer_nonIterableRest(); }\nfunction Timer_nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\nfunction Timer_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return Timer_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return Timer_arrayLikeToArray(o, minLen); }\nfunction Timer_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\nfunction Timer_iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t["return"] && (u = t["return"](), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }\nfunction Timer_arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n//** TIMER COMPONENT */\n\n\n\n\n\n// Import sound hook and audio file\n\n\n\n// Icon images for play, pause, and reset buttons\n\n\n\n\n/**\n * Timer component for meditation sessions.\n *\n * @returns {JSX.Element} The rendered Meditation component.\n */\nvar Timer = function Timer() {\n  // State variables\n  var _useState = (0,react.useState)(0),\n    _useState2 = Timer_slicedToArray(_useState, 2),\n    countdown = _useState2[0],\n    setCountdown = _useState2[1];\n  var _useState3 = (0,react.useState)(0),\n    _useState4 = Timer_slicedToArray(_useState3, 2),\n    duration = _useState4[0],\n    setDuration = _useState4[1];\n  var _useState5 = (0,react.useState)(false),\n    _useState6 = Timer_slicedToArray(_useState5, 2),\n    isActive = _useState6[0],\n    setActive = _useState6[1];\n  var _useState7 = (0,react.useState)(false),\n    _useState8 = Timer_slicedToArray(_useState7, 2),\n    countdownFinished = _useState8[0],\n    setCountdownFinished = _useState8[1];\n  var _useState9 = (0,react.useState)(false),\n    _useState10 = Timer_slicedToArray(_useState9, 2),\n    durationFinished = _useState10[0],\n    setDurationFinished = _useState10[1];\n  var _useSound = (0,use_sound_esm/* default */.Z)(singing_bowl),\n    _useSound2 = Timer_slicedToArray(_useSound, 2),\n    play = _useSound2[0],\n    stop = _useSound2[1].stop;\n\n  // Wake lock hook\n  var _useWakeLock = (0,react_screen_wake_lock_esm/* useWakeLock */.R)({\n      onRequest: function onRequest() {\n        return console.log(\'Screen Wake Lock: requested!\');\n      },\n      onError: function onError() {\n        return console.log(\'An error happened 💥\');\n      },\n      onRelease: function onRelease() {\n        return console.log(\'Screen Wake Lock: released!\');\n      }\n    }),\n    request = _useWakeLock.request,\n    release = _useWakeLock.release;\n\n  // If there is no user, stop the timer audio\n  var _useAuthContext = (0,useAuthContext/* useAuthContext */.E)(),\n    user = _useAuthContext.user;\n  (0,react.useEffect)(function () {\n    return function () {\n      stop();\n    };\n  }, [user, stop]);\n\n  /**\n   * Creates a closure to ensure the sound plays only once at the beginning and end.\n   *\n   * @returns {function(): number} A function that, when called, plays the sound once.\n   */\n  var playOnce = function playOnce() {\n    var count = 0;\n    return function () {\n      if (count === 1) {\n        return count;\n      } else {\n        play();\n        count++;\n      }\n    };\n  };\n  var playOnceBegin = playOnce();\n  var playOnceEnd = playOnce();\n\n  /**\n   * Toggles the play/pause functionality of the timer.\n   * If either countdown or duration is zero, the timer is not activated, and the sound is not played.\n   */\n  var togglePlayPause = function togglePlayPause() {\n    if (countdown === 0 && duration === 0) {\n      // If either is zero, do not activate the timer and do not play the sound\n      return;\n    }\n\n    // Set isActive to whatever the opposite of the current setting is\n    setActive(!isActive);\n    if (isActive) {\n      // If it was paused, stop the sound\n      stop();\n    } else {\n      // If it was not active, request wake lock\n      request();\n    }\n  };\n\n  /**\n   * Resets the timer to 0:00 and stops the sound when the user clicks the reset button.\n   */\n  var reset = function reset() {\n    setActive(false);\n    setCountdownFinished(false);\n    setDurationFinished(false);\n    setCountdown(0);\n    setDuration(0);\n    var countdownInput = document.querySelector(\'.countdown-input\');\n    var durationInput = document.querySelector(\'.duration-input\');\n    if (countdownInput) countdownInput.value = \'\';\n    if (durationInput) durationInput.value = \'\';\n    // Stop audio\n    stop();\n    // Release wake lock\n    release();\n  };\n\n  /**\n   * Effect hook to manage the countdown and duration intervals,\n   * as well as handle the playOnceBegin and playOnceEnd functions.\n   */\n  (0,react.useEffect)(function () {\n    var countdownInterval;\n    var durationInterval;\n\n    // Start the countdown interval when both countdown and duration are greater than zero\n    if (isActive && countdown > 0 && duration > 0) {\n      countdownInterval = setInterval(function () {\n        setCountdown(function (prevCountdown) {\n          return prevCountdown - 1;\n        });\n      }, 1000);\n    }\n\n    // Handle the end of countdown and trigger the sound once\n    if (isActive && countdown === 0 && !countdownFinished) {\n      setCountdownFinished(true);\n      playOnceBegin();\n      clearInterval(countdownInterval);\n    }\n\n    // Start the duration interval when countdown reaches zero and duration is greater than zero\n    if (isActive && countdown === 0 && duration > 0 && !durationFinished && countdownFinished) {\n      durationInterval = setInterval(function () {\n        setDuration(function (prevDuration) {\n          return prevDuration - 1;\n        });\n      }, 1000);\n    }\n\n    // Handle the end of duration and trigger the sound once\n    if (isActive && countdown === 0 && duration === 0 && !durationFinished && countdownFinished) {\n      setDurationFinished(true);\n      playOnceEnd();\n      release(); // Release wake lock\n      clearInterval(countdownInterval);\n      clearInterval(durationInterval);\n      setActive(false);\n    }\n\n    // Cleanup intervals when the component unmounts or dependencies change\n    return function () {\n      clearInterval(countdownInterval);\n      clearInterval(durationInterval);\n    };\n  }, [isActive, countdown, duration, countdownFinished, durationFinished]);\n\n  /**\n   * Handles the countdown change when the user selects or enters data into the countdown datalist.\n   *\n   * @param {Event} event - The input event.\n   */\n  var handleCountdownChange = function handleCountdownChange(event) {\n    var selectedValue = event.target.value;\n    var countdownInSeconds = parseCountdown(selectedValue);\n    setCountdown(countdownInSeconds);\n  };\n\n  /**\n   * Parses the countdown input from the datalist to be compatible with the timer.\n   *\n   * @param {string} durationString - The string representing the countdown duration.\n   * @returns {number} The parsed countdown duration in seconds.\n   */\n  var parseCountdown = function parseCountdown(durationString) {\n    var value = parseInt(durationString.replace(\'s\', \'\'), 10);\n    return isNaN(value) ? 0 : value;\n  };\n\n  /**\n   * Handles the duration change when the user selects or enters data into the duration datalist.\n   *\n   * @param {Event} event - The input event.\n   */\n  var handleDurationChange = function handleDurationChange(event) {\n    var selectedValue = event.target.value;\n    var durationInSeconds = parseDuration(selectedValue);\n    setDuration(durationInSeconds);\n  };\n\n  /**\n   * Parses the duration input from the datalist to be compatible with the timer.\n   *\n   * @param {string} durationString - The string representing the duration of the meditation.\n   * @returns {number} The parsed duration in seconds.\n   */\n  var parseDuration = function parseDuration(durationString) {\n    var valueInMinutes = parseInt(durationString.replace(\'m\', \'\'), 10);\n    return isNaN(valueInMinutes) ? 0 : valueInMinutes * 60;\n  };\n\n  /**\n   * Formats the given time in seconds to a string representation in the format MM:SS.\n   *\n   * @param {number} time - The time in seconds to be formatted.\n   * @returns {string} The formatted time string (MM:SS).\n   */\n  var formatTime = function formatTime(time) {\n    var minutes = Math.floor(time / 60);\n    var seconds = time % 60;\n    return "".concat(minutes, ":").concat(seconds < 10 ? \'0\' : \'\').concat(seconds);\n  };\n\n  /**\n   * Main timer component\n   *\n   * @returns {JSX.Element} The rendered Timer component.\n   */\n  return /*#__PURE__*/react.createElement("div", {\n    className: "timer"\n  }, /*#__PURE__*/react.createElement("div", {\n    className: "time"\n  }, /*#__PURE__*/react.createElement("div", {\n    className: "timer-circle ".concat(isActive ? \'timer-circle-grow\' : \'\')\n  }, countdown ? formatTime(countdown) : formatTime(duration))), /*#__PURE__*/react.createElement("h2", {\n    className: "quote"\n  }, "Let\'s begin."), /*#__PURE__*/react.createElement("div", {\n    className: "control-panel"\n  }, /*#__PURE__*/react.createElement("div", {\n    className: "time-dropdown"\n  }, /*#__PURE__*/react.createElement("div", {\n    className: "countdown-container"\n  }, /*#__PURE__*/react.createElement("label", {\n    htmlFor: "countdown"\n  }, "Countdown:"), /*#__PURE__*/react.createElement("input", {\n    className: "countdown-input",\n    id: "countdown",\n    list: "countdown-options",\n    placeholder: "Time in seconds",\n    name: "countdown",\n    onChange: handleCountdownChange\n  }), /*#__PURE__*/react.createElement("datalist", {\n    id: "countdown-options"\n  }, /*#__PURE__*/react.createElement("option", {\n    value: "5s"\n  }), /*#__PURE__*/react.createElement("option", {\n    value: "10s"\n  }), /*#__PURE__*/react.createElement("option", {\n    value: "15s"\n  }), /*#__PURE__*/react.createElement("option", {\n    value: "20s"\n  }), /*#__PURE__*/react.createElement("option", {\n    value: "25s"\n  }), /*#__PURE__*/react.createElement("option", {\n    value: "30s"\n  }), /*#__PURE__*/react.createElement("option", {\n    value: "45s"\n  }), /*#__PURE__*/react.createElement("option", {\n    value: "60s"\n  }))), /*#__PURE__*/react.createElement("div", {\n    className: "duration-container"\n  }, /*#__PURE__*/react.createElement("label", {\n    htmlFor: "duration"\n  }, "Duration:"), /*#__PURE__*/react.createElement("input", {\n    className: "duration-input",\n    id: "duration",\n    list: "duration-options",\n    placeholder: "Time in minutes",\n    name: "duration",\n    onChange: handleDurationChange\n  }), /*#__PURE__*/react.createElement("datalist", {\n    id: "duration-options"\n  }, /*#__PURE__*/react.createElement("option", {\n    value: "1m"\n  }), /*#__PURE__*/react.createElement("option", {\n    value: "5m"\n  }), /*#__PURE__*/react.createElement("option", {\n    value: "10m"\n  }), /*#__PURE__*/react.createElement("option", {\n    value: "15m"\n  }), /*#__PURE__*/react.createElement("option", {\n    value: "20m"\n  }), /*#__PURE__*/react.createElement("option", {\n    value: "25m"\n  }), /*#__PURE__*/react.createElement("option", {\n    value: "30m"\n  }), /*#__PURE__*/react.createElement("option", {\n    value: "35m"\n  }), /*#__PURE__*/react.createElement("option", {\n    value: "40m"\n  }), /*#__PURE__*/react.createElement("option", {\n    value: "45m"\n  }), /*#__PURE__*/react.createElement("option", {\n    value: "60m"\n  }), /*#__PURE__*/react.createElement("option", {\n    value: "90m"\n  }), /*#__PURE__*/react.createElement("option", {\n    value: "120m"\n  })))), /*#__PURE__*/react.createElement("div", {\n    className: "circle-button-container"\n  }, /*#__PURE__*/react.createElement("button", {\n    className: "circle-button button-primary-".concat(isActive ? \'active\' : \'inactive\'),\n    onClick: togglePlayPause\n  }, /*#__PURE__*/react.createElement("img", {\n    src: isActive ? pause_button : play_button,\n    id: "play-pause-btn",\n    alt: isActive ? \'Pause\' : \'Play\'\n  })), /*#__PURE__*/react.createElement("button", {\n    className: "circle-button",\n    onClick: reset\n  }, /*#__PURE__*/react.createElement("img", {\n    src: reset_button,\n    alt: "Reset",\n    id: "reset-btn"\n  })))));\n};\n/* harmony default export */ const components_Timer = (Timer);\n;// CONCATENATED MODULE: ./client/components/EntryContainer.jsx\n//** ENTRY CONTAINER COMPONENT */\n\n\n\n\n\n/**\n * EntryContainer - Main journal entry container that organizes new and past entries.\n *\n * This component serves as a container for both creating new journal entries and displaying\n * past entries in a feed. It also includes a meditation timer component.\n *\n * @returns {JSX.Element} The rendered EntryContainer component.\n */\nfunction EntryContainer() {\n  return (\n    /*#__PURE__*/\n    // Main EntryContainer component\n    react.createElement("div", {\n      className: "entry-container"\n    }, /*#__PURE__*/react.createElement("div", {\n      className: "timer-box"\n    }, /*#__PURE__*/react.createElement(components_Timer, null)), /*#__PURE__*/react.createElement("div", null, /*#__PURE__*/react.createElement(components_PastEntriesFeed, null)))\n  );\n}\n/* harmony default export */ const components_EntryContainer = (EntryContainer);\n;// CONCATENATED MODULE: ./client/pages/Home.jsx\n//** HOME PAGE */\n\n\n\n// Import the EntryContainer component\n\n\n/**\n * Home component represents the main page of the application.\n * It renders the EntryContainer component, which displays journal entries.\n *\n * @returns {JSX.Element} The rendered Home component.\n */\nfunction Home() {\n  return (\n    /*#__PURE__*/\n    // Main container for the Home component\n    react.createElement("div", {\n      className: "main"\n    }, /*#__PURE__*/react.createElement(components_EntryContainer, null))\n  );\n}\n/* harmony default export */ const pages_Home = (Home);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///5\n')}}]);